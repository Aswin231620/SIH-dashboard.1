import React from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ListTodo, Calendar, Clock, ChevronRight, CheckCircle } from "lucide-react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";

export default function PendingTasksCard({ tasks }) {
  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'urgent':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'high':
        return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getTaskTypeIcon = (type) => {
    switch (type) {
      case 'vaccination':
        return '💉';
      case 'inspection':
        return '🔍';
      case 'audit':
        return '📋';
      case 'training':
        return '📚';
      case 'health_check':
        return '🩺';
      default:
        return '📋';
    }
  };

  const isOverdue = (dueDate) => {
    return new Date(dueDate) < new Date();
  };

  const pendingTasks = tasks.filter(t => t.status === 'pending').slice(0, 4);
  const completedCount = tasks.filter(t => t.status === 'completed').length;

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ delay: 0.4 }}
    >
      <Card className="relative overflow-hidden hover:shadow-lg transition-all duration-300">
        <div className="absolute top-0 right-0 w-24 h-24 transform translate-x-6 -translate-y-6 bg-blue-500 rounded-full opacity-10" />
        
        <CardHeader className="pb-3">
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="p-2 rounded-lg bg-blue-50">
                <ListTodo className="w-5 h-5 text-blue-600" />
              </div>
              <span className="text-lg font-bold text-gray-900">Pending Tasks</span>
            </div>
            <div className="flex items-center gap-2">
              <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
                {pendingTasks.length} pending
              </Badge>
              {completedCount > 0 && (
                <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">
                  <CheckCircle className="w-3 h-3 mr-1" />
                  {completedCount}
                </Badge>
              )}
            </div>
          </CardTitle>
        </CardHeader>
        
        <CardContent>
          <div className="space-y-3">
            {pendingTasks.length > 0 ? (
              pendingTasks.map((task) => (
                <div
                  key={task.id}
                  className="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer"
                >
                  <div className="flex items-center gap-3">
                    <span className="text-lg">{getTaskTypeIcon(task.task_type)}</span>
                    <div className="flex-1">
                      <p className="font-medium text-sm text-gray-900">
                        {task.title}
                      </p>
                      <p className="text-xs text-gray-500 truncate">
                        {task.description}
                      </p>
                      <div className="flex items-center gap-2 mt-1">
                        <Calendar className="w-3 h-3 text-gray-400" />
                        <span className={`text-xs ${isOverdue(task.due_date) ? 'text-red-500' : 'text-gray-400'}`}>
                          Due: {new Date(task.due_date).toLocaleDateString()}
                        </span>
                        {isOverdue(task.due_date) && (
                          <Badge className="bg-red-100 text-red-700 border-red-200 text-xs">
                            Overdue
                          </Badge>
                        )}
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge className={getPriorityColor(task.priority)}>
                      {task.priority}
                    </Badge>
                    <ChevronRight className="w-4 h-4 text-gray-400" />
                  </div>
                </div>
              ))
            ) : (
              <div className="text-center py-6">
                <CheckCircle className="w-8 h-8 text-green-400 mx-auto mb-2" />
                <p className="text-sm text-gray-500">All tasks completed!</p>
              </div>
            )}

            <Link to={createPageUrl("TaskManagement")}>
              <Button variant="outline" className="w-full mt-3 hover:bg-blue-50 hover:border-blue-300">
                View All Tasks
                <ChevronRight className="w-4 h-4 ml-2" />
              </Button>
            </Link>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
}
